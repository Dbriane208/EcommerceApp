package daniel.brian.ecommerceapp.fragments.categories

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import daniel.brian.ecommerceapp.adapters.ColorAdapter
import daniel.brian.ecommerceapp.adapters.SizeAdapter
import daniel.brian.ecommerceapp.adapters.ViewPager2ImageAdapter
import daniel.brian.ecommerceapp.databinding.FragmentProductDetailsBinding
import daniel.brian.ecommerceapp.util.hideBottomNavigationView

class ProductDetailsFragment : Fragment() {
    private lateinit var binding: FragmentProductDetailsBinding
    // an autogenerated class that has our products arguments specified inside the navGraph
    private val args by navArgs<ProductDetailsFragmentArgs>()
    private val viewPager2Adapter by lazy { ViewPager2ImageAdapter() }
    private val sizeAdapter by lazy { SizeAdapter() }
    private val colorsAdapter by lazy { ColorAdapter() }
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // hiding the bottom navigation bar
        hideBottomNavigationView()
        // Inflate the layout for this fragment
        binding = FragmentProductDetailsBinding.inflate(layoutInflater)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val product = args.products

        setupSizesRV()
        setupColorsRV()
        setupViewPager()

        binding.apply {
            productName.text = product.name
            productPrice.text = product.price.toString()
            productDescription.text = product.description

            // hiding the colors and sizes if null
            if (product.colors.isNullOrEmpty())
                tvProductColors.visibility = View.INVISIBLE
            if (product.sizes.isNullOrEmpty())
                tvProductSizes.visibility = View.INVISIBLE
        }

        // implementing the image close functionality
        binding.imageClose.setOnClickListener {
            findNavController().navigateUp()
        }

        // updating our adapters. Using let to update non-null values of sizes and colors
        viewPager2Adapter.differ.submitList(product.images)
        product.colors?.let {
            colorsAdapter.differ.submitList(it)
        }
        product.sizes?.let {
            sizeAdapter.differ.submitList(it)
        }
    }

    private fun setupViewPager() {
        binding.apply {
            viewPagerProductImages.adapter = viewPager2Adapter
        }
    }

    private fun setupColorsRV() {
        binding.rvColors.apply {
            adapter = colorsAdapter
            layoutManager = LinearLayoutManager(requireContext(),LinearLayoutManager.HORIZONTAL,false)
        }
    }

    private fun setupSizesRV() {
       binding.rvSizes.apply {
           adapter = sizeAdapter
           layoutManager = LinearLayoutManager(requireContext(),LinearLayoutManager.HORIZONTAL,false)
       }
    }


}